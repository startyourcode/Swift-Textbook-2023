/*:
 # arrays
 __`配列`__
 \
 \
 ほとんどのプログラミング言語には「データを一列に並べて扱う仕組み」が用意されています。
 そのような仕組みを全体的にデータ構造といったりします。
 Swiftでは、データ構造の一つとして`Array`型が定義されており、これを**配列**といいます。
 \
 \
 配列のリテラルを記述するには、データの前後を角括弧`[ ]`で囲みます。
 
 ```swift
 ["Monday"]
 ```
 
 この配列リテラルは、「文字列の**要素**」がひとつだけ並んだ配列です。
 \
 \
 配列には、要素をカンマ記号`,`で区切っていくつも並べることができます。
 
 ```swift
 ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
 ```
 
 この配列には月曜日から金曜日まで「5個の要素」が並んでいます。
 つまり、要素の数が`5`個になったことを意味します。
 \
 \
 配列に名前をつけておけば、定数および変数として呼び出せます。
 
 ```swift
 let weekDay = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
 print(weekDay)
 // ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
 ```

 定数`weekDay`を出力すると、配列データが丸ごと表示されます。
 \
 \
 配列に並んでいる個々の要素にアクセスするには、添え字形式（_subscript_）で**インデックス**を指定します。
 インデックスとは「要素の並び順」のことで、数え方は常にゼロから開始します。
 
 例えば、`weekday`配列の「月曜日」を参照したければ、添え字に`0`を指定します。
 同様に、「金曜日」を参照するには添え字に`4`を指定します。

 ```swift
 weekDay[0]    // "Monday"
 weekDay[4]    // "Friday"
 ```

 配列の要素を参照するインデックスには「有効な範囲」があります。
 添え字に無効なインデックスを指定した場合、ランタイムエラーが発生します。
 つまり、`weekDay`配列は要素数が`5`個なので、インデックスは`0`から`4`までが有効な範囲です。
 
 したがって、`weekday`配列にインデックス`5`を指定することは無効です。
 
 ```
 weekDay[5]    // runtime error
 ```
 
 このコードを実行するとランタイムエラーが発生するので、コメントアウトしておきましょう。
 \
 \
 プログラムで配列を扱う際は常に、「インデックスの有効範囲」に注意してください。
 慣れないうちは、要素数とインデックスを混同しないように気をつけてください。
 
 Array型には、配列を便利に扱うためのプロパティやメソッドがたくさん用意されています。
 例えば、配列の要素数は`count`プロパティを使って取得できます。
 
 ```swift
 weekday.count  // Number of elements is 5.
 ```

 配列の要素数が分かれば、その有効なインデックスの範囲は自ずと計算できます。
 先頭インデックスは常に`0`なので、最終インデックスは「`要素数 - 1`」です。
 \
 \
 他にも、配列の先頭要素を`first`プロパティで取得できます。
 
 ```swift
 weekDay.first       // "Monday"
 weekDay.last        // "Friday"
 ```

 同様に最後の要素を知りたければ、`last`プロパティを呼び出します。
 \
 \
 なお、Swiftの配列では、要素となる値の型が一貫している必要があります。
 
 例えば、次のような配列リテラルを記述することは不正です。
 
 ```swift
 ["one", 2, "3"]
 ```

 この配列リテラルには「`String`型の要素」と「`Int`型の要素」が入り混じっています。
 したがって、要素の型に一貫性がないため、コンパイラはエラーを報告します。
 
 すべての要素を`String`型に揃えると、エラーは解消します。
 
 ```swift
 ["one", "2", "3"]
 ```

 Swiftのデータ構造は「型の一貫性」が保証されているので、より安全なコーディングが可能になります。
 */
let weekDay = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
print(weekDay)

weekDay[0]
weekDay[4]
//weekDay[5]

weekDay.count
weekDay.first
weekDay.last

["one", "2", "3"]
