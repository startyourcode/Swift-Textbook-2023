/*:
 # while loops
 __`whileループ構文`__
 \
 \
 日常生活において何かを繰り返すとき、事前にその回数が決まっている場合とそうでない場合があります。
 例えば、夕方の公園でブランコを遊んでいる子どもは「あと3回だけ」というかもしれません。
 そうでなければ、「陽が沈むまで」というかもしれません。
 
 コードを繰り返したい回数が決まっていない場合はwhileループを使うことができます。
 whileループは「指定した条件」を満たす間だけコードを繰り返します。
 \
 \
 ここでは、サイコロを「`5`が出るまで転がす」ためのループを考えましょう。
 
 以下に定義する`roll()`関数は、サイコロを振ったように`1`から`6`の整数をランダムに返します。

 ```swift
 func diceRoll() -> Int {
     return Int.random(in: 1...6)
 }
 ```

 `roll()`関数が返した数を変数`number`に保持しておきます。
 
 ```swift
 var number = diceRoll()
 print("You got \(number)." // Prints You got 1~6.
 ```
 
 実行するたびに「サイコロの出目」が変化することを確認できます。
 \
 \
 `5`が出るまでサイコロを振るには、このコードを何回繰り返せば良いでしょうか？
 すぐに`5`が出るかもしれないし、なかなか出ないかもしれません。
 つまり、「`5`が出るまで繰り返す」ためのループ回数は、事前に指定できません。
 このような場合は、whileループを使って「指定した条件」を満たす間だけ繰り返します。

 次のwhileループは「出目が`5`ではない」という条件を満たす間だけ、コードを繰り返します。

 ```swift
 while number != 5 {
     number = diceRoll()
     print("You got \(number).")
 }
 ```
 
 このwhileループを実行すると、何度かサイコロを振っているうちに出目が`5`になります。
 すると、ループ条件の`number != 5`は`false`を返します。
 つまり、指定したループ条件を満たさなくなったので、コードの制御フローはwhileループから脱出して、このプログラムが終了します。
 \
 \
 whileループは「コードが繰り返される前」にループ条件が評価される点に留意してください。
 これは「条件を評価した結果」次第では、一度もコードが実行されずにループが終了する可能性があることを意味します。
 */
func diceRoll() -> Int {
    return Int.random(in: 1...6)
}

var number = diceRoll()
print("You got \(number).")

while number != 5 {
    number = diceRoll()
    print("You got \(number).")
}
