/*:
 # for-in loop statement
 __`For-inループ構文`__
 \
 \
 優れたコードを書くために、「DRY; Don't Repeat Yourself（同じことを繰り返さない ）」という考え方があります。
 
 例えば、「ノックを3回する」ために次のようなコードを記述することはナンセンスです。
 
 ```swift
 print("nock!")
 print("nock!")
 print("nock!")
 ```
 
 同じコードを書くことは冗長であり、何度もそれを読むハメになります。
 もしかすると、コーディング時に`nock`をタイプミスするかもしれません。
 「ノック」の回数を増やすことになった場合は、同じコードがさらに増えてしまいます。
 \
 \
 同じコードを「決まった回数」だけ繰り返したい場合は、**for-inループ構文**を利用できます。
 for-inループ構文を開始するには、forキーワードを利用します。
 
 for-inループ構文では、先ほどの「ノックを3回する」ためのコードを次のように記述できます。
 
 ```swift
 for _ in 1...3 {
     print("nock!")
 }
 // nock!
 // nock!
 // nock!
 ```
 
 このループでは「ノックを3回する」ので、`in`キーワードの後に`1...3`を指定します。
 `1...3`の記述は、「1, 2, 3」という整数の範囲を表します。
 「ノックの回数」を増やしたければ、整数の範囲を書き換えるだけです。
 
 ```swift
 for _ in 1...4 {
     print("nock!")
 }
 // nock!
 // nock!
 // nock!
 // nock!
 ```
 
 繰り返しが増えても、コードの行数に影響しません。
 \
 \
 また、アンダーバー記号`_`の部分に「任意の識別子」を宣言すると、「現在の繰り返し回数」を参照できます。
 
 ```swift
 for number in 1...4 {
     print(number)
 }
 // 1
 // 2
 // 3
 // 4
 ```
 
 ループを繰り返す度に、`number`には「`1`から`4`の範囲」の整数が順番に設定されます。
 \
 \
 ループ回数を指定する部分には、文字列も適用できます。
  
 ```swift
 for letter in "Abracadabra" {
     print(letter)
 }
 // A
 // b
 // r
 // a
 // c
 // a
 // d
 // a
 // b
 // r
 // a
 ```
 
 このfor-inループでは、文字列を一文字ずつ取り出してコンソールに出力します。
 */
for number in 1...4 {
    print("nock! \(number)")
}

for letter in "Abracadabra" {
    print(letter)
}
