/*:
 # adding an elements
 __`要素を追加する`__
 \
 \
 データを配列として扱うと効率よく管理できます。
 配列データを扱うことは、その要素を並べ替えたり、増やしたり減らしたりすることを意味します。
 
 その際に行われる基本的な配列操作は...
 - 配列の最後に新しい要素を追加する
 - 配列の任意の場所に新しい要素を挿入する
 - 配列の要素を更新する
 - 配列から要素を削除する
 
 ことがあげられます。
 
 これらの操作を行うには、`Array`型の各種メソッドを利用します。
 ここでは、配列に新しい要素を追加する方法を学びましょう。
 \
 \
 例として、フィボナッチ数列を考えます。
 フィボナッチ数列には「最初の二項が`1`で、それ以降の項は直前の二項の和になっている」という法則があります。

 以下に、最初の二項を並べた`fibonacci`配列を定義します。
 
 ```swift
 var fibonacci = [1, 1]
 ```
 
 次に来る値は、前ふたつの項を足した数です。
 つまり、`1 + 1`なので`2`と計算できます。
 \
 \
 配列に要素を追加するには、`append(_:)`メソッドを呼び出します。
 そして、パラメータに「追加したい要素」を指定します。
   
 ```swift
 fibonacci.append(2)    // [1, 1, 2]
 ```

 このコードは、配列の最後に新しい要素として`2`を追加します。

 実行した結果、`fibonacci`配列には`[1, 1, 2]`が並びました。
 このように`append()`メソッドは常に「新しい要素」をひとつずつ、配列の最後尾に追加します。
 \
 \
 新しい要素をいくつか同時に追加したければ、 `append(contentsOf:)`メソッドを使用できます。
 `append(contentsOf:)`メソッドのパラメータには「呼び出し元と同じ型の配列」を指定します。
 
 ```swift
 fibonacci.append(contentsOf: [3, 5, 8])     // [1, 1, 2, 3, 5, 8]
 ```

 このコードは、`fibonacci`配列に`3, 5, 8`を一度に追加します。
 
 この時点で、`fibonacci`配列には`[1, 1, 2, 3, 5, 8]`が並んでいます。
 最初の2項を除いて、どの要素も「直前ふたつの要素を足した数」になっています。
 \
 \
 `append(contentsOf:)`メソッドの実行結果は、配列同士の結合ともいえます。
 配列同士を結合する場合、複合代入演算子`+=`を使うこともできます。

 次のコードは、`fibonacci`配列と別の配列`[13, 21, 34]`を結合します。
 
 ```swift
 fibonacci += [13, 21, 34]  // [1, 1, 2, 3, 5, 8, 13, 21, 34]
 ```

 `fibonacci`配列にいくつかの要素を追加した結果、`9`個の要素が並びました。
 つまり、有効なインデックスは`0`から`8`までです。
 \
 \
 配列に並んでいる要素の順番は、固定されています。
 プログラマーが意図的に操作しない限り、要素の並び順は変わりません。
 */
var fibonacci = [1, 1]
fibonacci.append(2)
fibonacci.append(contentsOf: [3, 5, 8])
fibonacci += [13, 21, 34]
