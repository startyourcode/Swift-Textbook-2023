/*:
 # modifying an element
 __`配列の要素を更新する`__
 \
 \
 配列の要素に設定されている値を更新する方法について、学びます。
 要素の値を更新するには、添え字と代入演算子`=`を使って「変更したい要素」に「新しい値」を設定します。

 例として、いくつかの果物が並んだ`fruits`配列を扱います。
 
 ```swift
 var fruits = ["🍎", "🥝", "🥝"]
 ```
 
 この`fruit`配列の要素数は`3`個で、有効なインデックスの範囲は`0`から`2`までです。
 \
 \
 `fruits`配列に並んでいる絵文字を更新して、アルファベット表記にしましょう。
 
 次のコードは、「絵文字のりんご🍎」をアルファベットの`"Apple"`に更新します。
 「絵文字のりんご🍎」は配列の先頭にあるので、インデックス`0`を添え字に指定します。

 ```
 fruits[0] = "Apple"
 ```
 
 実行した結果、`fruits`配列の先頭要素が更新されました。
 
 ```swift
 print(fruits)  // Prints ["Apple", "🥝", "🥝"]
 ```
 
 このようにして配列の要素を更新するには、「更新したい要素のインデックス」を知っておく必要があります。
 \
 \
 無効なインデックスの要素を更新しようとすると、ランタイムエラーが発生します。
 
 ```
 fruits[3] = "Orange"    // runtime error; Index out of range.
 ```
 
 このコードは`fruits`配列のインデックスが`3`の要素を更新しようとしますが、そのような要素は存在しません。
 「指定したインデックスが無効であること」はコンパイル時に検出できないので、実行時にエラーが発生します。
 \
 \
 配列の操作は、出来るだけ安全かつ慎重に行うべきです。
 そのためには、操作を行う前に「有効なインデックスを取得できている」こと確認する必要があります。
 `Array`型には「指定した要素のインデックス」を安全に取得するためのメソッドがいくつか用意されています。

 次のコードは、`fruits`配列における「絵文字のキウイ🥝」のインデックスを調べます。
 
 ```swift
 fruits.firstIndex(of: "🥝")     // 1
 fruits.lastIndex(of: "🥝")      // 2
 ```

 `firstIndex(of:)`メソッドは、指定された値が「配列内で最初に一致した要素」のインデックスを返します。
 `lastIndex(of:)`メソッド、指定された値が「配列内で最後に一致した要素」のインデックスを返します。
 実行すると、いずれのメソッドからも正しいインデックスを取得できます。
 \
 \
 もし、これらのメソッドに対して「一致するはずのない値」を指定すると、どうなるでしょうか？

 例えば、「絵文字のオレンジ🍊」は`fruits`配列に存在しません。

 ```swift
 fruits.firstIndex(of: "🍊")     // nil
 ```
 
 配列内で一致する要素が見つからなかった場合、`firstIndex(of:)`メソッドは`nil`を返します。
 
 つまり、メソッドに指定した値次第で、返り値は「`nil`かもしれない」し、「インデックスかもしれない」ということです。
 これは、`firstIndex(of:)`メソッドは常に「オプショナル値を返す」ことを意味しています。
 このことは`lastIndex(of:)`メソッドも該当します。
 \
 \
 これらのメソッドを利用すれば、ランタイムエラーを引き起こすことなく、配列の要素を安全に更新できます。
 
 次のコードは、オプショナル・バインディングを使って、`firstIndex(of:)`メソッドで取得したインデックスを安全にアンラップします。
 
 ```swift
 if let indexOfFirstKiwi = fruits.firstIndex(of: "🥝") {
     fruits[indexOfFirstKiwi] = "Kiwi"
 }
 ```
 
 このコードは、配列内に「絵文字のキウイ🥝」があったら、その要素をアルファベットの`"Kiwi"`に更新する、と解釈できます。
 */
var fruits = ["🍎", "🥝", "🥝"]

fruits[0] = "Apple"
print(fruits)

//fruits[3] = "Orange"

fruits.firstIndex(of: "🥝")
fruits.lastIndex(of: "🥝")
fruits.firstIndex(of: "🍊")

if let indexOfFirstKiwi = fruits.firstIndex(of: "🥝") {
    fruits[indexOfFirstKiwi] = "Kiwi"
}
