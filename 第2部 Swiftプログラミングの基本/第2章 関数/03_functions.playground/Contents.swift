/*:
 # functions
 `関数の基本`
 \
 \
 Swiftには`print()`関数の他にも、たくさんの関数が用意されています。
 どの関数も便利な機能を持っていますが、結局のところ、関数とは「一連の手続きに名前をつけて、呼び出す」ための方法です。
 ここでは、独自の機能を果たす新しい関数を、自分で定義する方法を学びます。
 \
 \
 例として、コンソールに「`"Hello, world!"`」と出力するだけの、単純な関数を定義することにしましょう。

 1. 独自の関数を定義するには、`func`キーワードを使います。
 2. そして、機能を呼び出すための識別子をロワーキャメルケースで記述します。
 3. ここでは、関数の名前を`hello`とします。
 4. 関数名の直後には常に、括弧`()`を付けます。
 5. 最後に、「波括弧のコードブロック`{}`」を作成します。
 
 以上が、`hello()`関数の宣言です。

 ```
 func hello() {

 }
 ```
 
 続けて、この`hello()`関数が「どのような手続きを行うか」を、コードブロックの中に記述します。
 このコードブロックは「関数の**ボディ**』です。
 \
 \
 当初の目的通りに、`"Hello, world!"`を出力しましょう。
 
 ```
 func hello() {
     print("Hello, world!")
 }
 ```
 
 ボディに手続きを実装して、関数の定義が完了しました。
 \
 \
 さっそく、定義した`hello()`関数を呼び出しましょう。
 
 ```
 hello()    // Prints Hello, world!
 ```
 
 `hello()`関数を呼び出すコードを実行すると、コンソールにメッセージが出力されます。
 
 この`hello()`関数は、いつでも何度でも呼び出すことができます。
 
 ```swift
 hello()
 hello()
 hello()
 ```
 
 プログラムの中で何度も「`"Hello, world!"`」を出力する場合を考えてください。
 `hello()`関数があれば、メッセージのスペルミスをする心配がない上に、コードは簡潔に保たれます。
 */
func hello() {
    print("Hello, world!")
}
hello()
hello()
hello()
