/*:
 # grobal variables
 __`グローバル変数`__
 \
 \
 変数と関数を一緒に使ってみましょう。
 変数の値をインクリメント（増分）する関数を定義します。
 この実践によって、「定数および変数などの識別子」を呼び出せる範囲（**スコープ**）について学びます。
 \
 \
 まず、「増分した数」を追跡するための変数`total`を定義します。
 
 ```
 var total = 0
 ```

 増分する前なので、既定値はゼロです。
 \
 \
 この変数`total`は、どのコードブロックにも含まれていません。
 つまり、トップレベルの「グローバルな領域」で定義されました。
 このような変数のことを**グローバル変数**といいます。
 \
 \
 次に、変数`total`の数を増分させるための`increment()`関数を定義します。
 
 ```
 func increment() {
     total += 1
 }
 ```

 `increment()`関数は、呼び出されるたびに変数`total`の値を`1`ずつ増分します。

 これは、`increment()`関数が、その内部でグローバル変数`total`参照していることを意味します。
 \
 \
 この関数を呼び出すと、その回数だけ変数`total`の値も増加できます。
 
 ```
 increment()
 increment()
 print(total)    // 2
 ```

 この例は「グローバル変数は、プログラムのどこからでも参照できる」ことを示しています。
 \
 \
 実際のところ、グローバル変数には危険が伴います。
 その理由は「プログラムのどこからでも参照される可能性がある」からです。
 グローバル変数は、危険な臭いがするコード（*code smell*）です。
 */
var total = 0

func increment() {
    total += 1
}

increment()
increment()
print(total)

