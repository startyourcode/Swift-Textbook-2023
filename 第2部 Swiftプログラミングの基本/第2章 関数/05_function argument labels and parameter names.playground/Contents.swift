/*:
 # Function Argument Labels and Parameter Names
 __`引数ラベルとパラメータ名`__
 \
 \
 パラメータを受け取る関数は、パラメータ名とは別に**ラベル**を設定できます。
 ラベルはその名の通り、「パラメータ名の上に貼り付けたシール」のようなものです。
 関数を呼び出すコード側で、読み手に「そのパラメータの役割や意図」を伝えることができます。
 なお、ラベルは文脈上、**外部引数名**と呼ばれることもあります。
 対照的に、関数のボディで参照できるパラメータ名のことを**内部引数名**と呼んだりします。
 \
 \
 例として、友達に挨拶する`greeting(who:)`関数を再び定義して、ラベルを設定します。
 以下のコードは、ラベルがない`greeting(who:)`関数を定義します。
 
 ```swift
 func greeting(who: String) {
     print("Hi, \(who)!")
 }
 ```
 
 `greeting(who:)`関数を呼び出します。
 次のコードを実行すると、「ライナスへの挨拶」が出力されます。
 
 ```swift
 greeting(who: "Linus") // Prints Hi, Linus!
 ```
 
 パラメータを指定する部分に注目してください。
 括弧の中にある`who`は、パラメータ名です。
 ライナスに挨拶できますが、この呼び出しコードから「ライナスが友達である」ことは読み取れません。
 \
 \
 それでは、関数の定義にラベルを設定します。
 パラメータの直前に、`myFriend`というラベル追記します。
 
 ```
 func greeting(myFriend who: String) {
     print("Hello, \(who)")
 }
 ```

 すると、呼び出しコードでエラーが報告されます。
 これは、パラメータにラベルが設定されたことによって、関数呼び出し時に「パラメータ名を指定することが禁止された」からです。
 
 エラーを解消するには、ラベルを使って関数を呼び出します。
 
 ```swift
 greeting(myFriend: "Linus")    // Prints Hi, Linus!
 ```

 この呼び出しコードからは、「友達のライナスに挨拶する（`Greeting my friend Linus`）」という意図が読み取れます。
 つまり、`greeting(myFriend:)`関数は「友達に挨拶する」ための関数であることが、より明確にできました。
 \
 \
 関数を定義する際、ラベルにアンダースコア記号`_`を使うと、関数をより簡潔に呼び出すことができます。

 `greeting(myFriend:)`関数のラベルにアンダースコア記号`_`を設定して、呼び出しコードを確認しましょう。

 ```
 func greeting(_ who: String) {
     print("Hi, \(who)")
 }
 ```

 関数の呼び出しコードがエラーを報告するので、パラメータ名もラベルも省略します。
 
 ```
 greeting("Linus")  // Prints Hi, Linus!
 ```

 このコードからは「ライナスに挨拶する」という意図だけが伝わります。
 ここで用いられたアンダースコア記号`_`を、プログラミングでは**ワイルドカード**と呼ぶことがあります。
 \
 \
 独自の関数を定義する際は、それか「どのような機能を果たすか」だけではなく、「どのように呼び出されるか」までを考慮しておくと良いでしょう。
 */
func greeting(_ who: String) {
    print("Hi, \(who)")
}
greeting("Linus")

