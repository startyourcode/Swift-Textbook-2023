/*:
 # function parameters
 __`関数のパラメータ`__
 \
 \
 突然ですが、友達に挨拶するためにはどのような関数を定義すれば良いでしょうか。
 「チャーリーに挨拶するための関数」と「ルーシーに挨拶するための関数」を別々に定義するのは、ナンセンスです。
 「ほとんど同じだが、少しだけ機能が異なる場合」は**パラメータ**を使って、関数の動作をカスタマイズできます。
 \
 \
 それでは、「友達の誰か」に挨拶するための`greeting()`関数を定義しましょう。
 
 ```
 func greeting() {
 
 }
 ```

 関数の直後にある括弧`()`の中に、「その関数がどのように動作するか」を指定するパラメータを宣言できます。
 \
 \
 `greeting()`関数のパラメータは「挨拶する誰か」を示すので、その識別子は`who`と記述します。
 そして、型アノテーションで「`who`が文字列型である」ことを明示します。
 
 ```
 func greeting(who: String) {
 
 }
 ```
 
 関数のボディでは、「パラメータが受け取った値」を参照できます。
 
 ```
 func greeting(who: String) {
     print("Hello, \(who)!")
 }
 ```
 
 `greeting(who:)`関数が定義できました。
 \
 \
 次のコードは、`hello(who:)`関数を呼び出して、友達の「チャーリー」に挨拶します。
 
 ```
 greeting(who: "Charlie")    // Prints Hi, Charlie.
 ```

 続けて、友達の「ルーシー」に挨拶しましょう。
 
 ```
 greeting(who: "Lucy")       // Prings Hi, Lucy.
 ```

 同じ`greeting()`関数を使って、チャーリーとルーシーに個別の挨拶ができました。
 これは、関数の実行結果が「パラメータの値」に基づいて変化したことを意味します。
 
 パラメータを利用すると、関数が「どのように動作するか」を呼び出し時に指定できます。
 なお、パラメータは文脈上、**引数**と呼ぶこともあります。
 */
func greeting(who: String) {
    print("Hi, \(who).")
}

greeting(who: "Charlie")
greeting(who: "Lucy")
