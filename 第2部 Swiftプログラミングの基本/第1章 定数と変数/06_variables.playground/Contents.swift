/*:
 # variables
 `変数`
 \
 \
 一般的に「地球の直径」はいつ誰がみても同じで、変化しない値です。
 「水の沸点」や「重力加速度」も同様です。
 つまり、これらは変更されないことが前提のデータです。
 
 対照的に、「誰かの身長」や「現在の気温」は日々、刻々と変化するデータです。
 このような「変更する可能性があるデータ」をプログラムで扱う場合は、値を**変数**として定義します。
 変数を宣言するには`var`キーワードを使います。
 \
 \
 例えば、次のコードは「年齢」が`17`歳であること定義します。
 
 ```
 var age = 17
 ```
 
 変数の呼び出し方は、定数と全く同じです。
 
 ```
 age        // 17
 ```
 
 ここでは、変数名もロワーキャメルケースに従って命名する点に注目してください。
 /
 /
 変数は、定義した後でも代入演算子`=`を使って、その値を変更できます。
 
 例えば、誕生日がきて年齢が`18`歳なったら、代入演算子`=`を使って変数`height`の値を`18`に更新できます。
 
 ```
 age = 18
 ```
 
 呼び出してみると、値が更新されていることを確認できます。
 
 ```
 age     // 18
 ```

 Swiftプログラミングでは基本的に定数を使用することが推奨されています。
 その理由は、常に値が固定されることによる安全性です。
 値を更新する必要がある場合に限り、変数を使って下さい。
 \
 \
 インスペクターのクイックヘルプに見ると、コンパイラが「変数`age`は`Int`型である」と推論したことが確認できます。
 したがって、この変数`age`に整数以外のデータを設定することはできません。
 
 例えば、少数点数で値を更新しようとすると、コンパイルエラーが発生します。
 
 ```
 age = 18.5   // error: Cannot assign value of type 'Double' to type 'Int'
 ```
 
 これは、Swiftコンパイラが「コードの型チェック」が行っていることを意味します。
 「型が曖昧なデータ」を厳しくチェックすることによって、Swiftの型安全なプログラミングが可能になります。
 
 一般的に、厳しい型チェックが行われるプログラミング言語は**静的型付け言語**と呼ばれます。
 対照的に、変数の更新にあたって「どのようなデータ型の値」でも更新可能な言語を**動的型付け言語**といいます。
 近年、多くのプログラミング言語は静的型付けをサポートする傾向があります。
 */
var age = 17
age
age = 18
//age = 18.5


