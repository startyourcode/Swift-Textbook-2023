/*:
 # increment and decrement
 `複合代入演算子`
 \
 \
 変数の値を上手に更新する方法を紹介します。
 数値を増やしたり、減らしたりするコードを手短に記述できるようになりましょう。
 \
 \
 例えば、気温は1日の間に何度も上がったり、下がったりを繰り返す値です。
 この「現在の気温」をプログラムで追跡する場合、変数として定義するべきです。

 次のコードは、「現在の気温」が`26.5`度であることを示します。
 
 ```
 var temperature = 26.5
 ```

 気温が`0.1`度だけ上昇した場合は、`26.5`に`0.1`を加算して、現在の気温を`26.6`に更新します。
 
 次のコードは、変数`temperature`に「`0.1`だけ加算した値」を代入します。
 
 ```
 temperature = temperature + 0.1
 temperature    // 26.6
 ```

 その結果、変数`temperature`を参照すると、`26.6`が取得できます。
 \
 \
 ここで、加算処理を行ったコードに注目して下さい。
 `temperature`という識別子を、同じ行に2度も記述しています。
 同じ識別子を繰り返し記述することは「コーディングの余計な手間」であり、見た目にも冗長な印象を与えてしまいます。
 \
 \
 先ほどのコードは、次のように手短に記述できます。
 
 ```
 temperature += 0.1 // short hand for increment
 temperature    // 26.6
 ```

 この`+=`ような「演算と代入を同時に行う演算子」を**複合代入演算子**といいます。
 \
 \
 値の減算についても、複合代入演算子を使って同じように記述できます。
 
 次のコードは「現在の気温」を`0.1`度ずつ低くして、`26.4`に変更します。
 
 ```
 temperature -= 0.1
 temperature -= 0.1
 temperature    // 26.4
 ```

 このようにして、一定値ずつ減らす処理を**デクリメント**といいます。
 反対に、一定値ずつ増やす処理は**インクリメント**といいます。
 なお、割り算や掛け算についても、複合代入演算子を使った省略記法を利用できます。
 */
var temperature = 26.5
temperature += 0.1
temperature

temperature -= 0.1
temperature -= 0.1
temperature
