/*:
 # implicitly unwrapped optionals
 __`オプショナルの暗黙的なアンラップ`__
 \
 \
 Swiftのオプショナルは、定数および変数に「値が存在しない状態」を許容します。
 しかしながら、定義したオプショナル値に「必ず、値が存在する」ことが、プログラムの内容から確約される場合があります。
 必ず、値が存在するのであれば、いつでも安全にオプショナル値をアンラップできます。
 したがって、そのようなオプショナル値を扱う度に「値の存在」をチェックすることは余計な手間です。
 常に値が存在するオプショナル値は、「暗黙的にアンラップされるオプショナル型」として定義できます。
 \
 \
 次のコードは「暗黙的にアンラップされるオプショナルな`String`型の値」を定義します。
 
 ```swift
 var implicitUnwrappedSpell: String! = "Abracadabra"
 ```
 
 値に明示する型アノテーションの直後に感嘆符`!`があることに注目してください。
 \
 \
 実際のところ、「暗黙的にアンラップされるオプショナル値」の扱い方は、「通常のオプショナル値」と大して違いません。
 ただし、「暗黙的にアンラップされるオプショナル値」はプログラマーがアンラップせずに、その値にアクセスできる場合があります。
 これは、あたかもオプショナルでない「通常の値」のように使用できることを意味します。
 実際に使用する際、オプショナル値の直後に感嘆符`!`を付けなくても、Swiftが自動的にアンラップしてくれます。
 言い換えると、「暗黙的にアンラップされるオプショナル値」は、「必要に応じて自動アンラップされる値」とも解釈できます。
 \
 \
 例として、オプショナルな文字列を考えます。
 
 次のコードは定数に「暗黙的にアンラップされるオプショナル値」を割り当てます。

 ```swift
 let someData = implicitUnwrappedSpell
 ```
 
 この定数`someData`は宣言の際に「型が明示されていない」ので、どんな型の値でも割り当てることができます。
 コンソール出力すると、定数`someData`は暗黙的にアンラップされることなく「普通のオプショナル値として扱われる」ことを確認できます。

 ```swift
 print(someData)    // Prints optional("Abracadabra")
 ```

 なお、このときにコンパイラが「型を強制的に`Any`型として扱おうとする」ことを警告しますが、無視してください。
 \
 次に、先ほどのコードと同じく、定数に「暗黙的にアンラップされるオプショナル値」を割り当てます。
 ただし、今度はオプショナルではない「普通の`String`型である」と型アノテーションで明示的に宣言します。

 ```swift
 let anotherData: String = implicitUnwrappedSpell   // Automatically unwrapped.
 ```

 この定数`anotherData`は「通常の`String`型以外の値を割り当てる」ことはコンパイラによって禁止されます。
 つまり、「オプショナルな`String`型の値」を割り当てることもできません。
 その結果、「暗黙的にアンラップされるオプショナル値」は定数`anotherData`に割り当てられる際、自動的にアンラップされます。

 ```swift
 print(anotherData)   // Prints "Abracadabra"
 ```

 出力された内容から、値がアンラップされたことを確認できます。
 \
 \
 Swiftは「暗黙的にアンラップされるオプショナル値」を可能な限り、「普通のオプショナル値」として扱おうとします。
 そして、「オプショナル値としては使用できない」と判断した場合のみ、値を暗黙的にアンラップします。
 \
 \
 「暗黙的にアンラップされるオプショナル値」は定義されて以降、そこに「必ず、値が存在し続ける」ことを保証できる場合に限り有用です。
 万が一、「暗黙的にアンラップされるオプショナル値」が`nil`の状態でアクセスすると、ランタイムエラーが発生します。
 これは、`nil`状態のオプショナル値を強制的にアンラップした場合とまったく同じ結果です。
 プログラムのどこかで、その変数が`nil`になるかもしれない場合は「暗黙的にアンラップされるオプショナル値」を使用すべきではありません。
 通常のオプショナル型を使用して、参照する際には`nil`チェックを行います。
 */
var implicitUnwrappedSpell: String! = "Abracadabra"

let someData = implicitUnwrappedSpell
print(someData)

let anotherData: String = implicitUnwrappedSpell
print(anotherData)
