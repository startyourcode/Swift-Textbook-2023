/*:
 # optionals
 __`オプショナル`__
 \
 \
 結局のところ、プログラミングは「データを操作すること」に他なりません。
 そして、一般的にプログラムで「存在しないデータ」を操作することはとても危険です。
 「存在しないデータ」を操作しようとすると、プログラムはエラーを報告してアプリケーションはクラッシュします。
 Swiftでは「データが存在しない」ことを`nil`というリテラルで表現します。
 
 ```swift
 nil    // error; no data
 ```

 `nil`は「数値のゼロ`0`」でもなければ、文字数がゼロの「空文字`""`」でもありません。
 ある意味では「無の値」といえます。
 \
 \
 `nil`は、エラーを引き起こすかもしれない危険な値です。
 そのため、Swiftでは`nil`を「通常の値」として使用できません。
 例えば、通常の変数に`nil`を設定することはできません。
 
 以下のコードでは、`Int`型の変数`data`に`nil`を割り当てようとしていますが、コンパイラはエラーを報告します。

 ```swift
 var data:Int = 123    // number is Int type
 data = nil            // compile error
 ```

 この例における変数`data`は`Int`型ですが、実際にはそれがどんなデータ型であっても通常の変数には`nil`を設定できません。
 \
 \
 しかしながら、プログラムでは「どうしても`nil`を扱わなくてはいけない状況」が起こりえます。
 そのため、「プログラマーが明示的に許可した場合」に限り、変数が`nil`を扱えるようになります。

 変数にnilを設定できるよう明示的に許可するには、型の直後に疑問符`?`を追記します。
 
 ```swift
 var data: Int? = 123 // Explicitly declared optional.
 data = nil           // compile succeed now.
 ```

 疑問符をつけることによって、`nil`が許可されたデータ型を**オプショナル**といいます。
 つまり、上記の例では「変数`data`がオプショナルな`Int`型になった」ので、`nil`を設定できました。
 \
 \
 型名の直後につけられた疑問符`?`は、そこに割り当てられている値が「`nil`かもしれない」ことを示しています。
 つまり、「値が整数である」かもしれないし、「値が存在しない」かもしれない状態です。
 また、オプショナルな`Int`値に他の型の値（例えば、真偽値や文字列など）を割り当てることはできません。
 オプショナルな`Int`型の値は「通常の整数」か「何も値がない」のいずれかです。
 \
 \
 なお、オプショナルな定数および変数に既定値を設定しなかった場合は、自動的に`nil`が割り当てられます。

 次のコードは、「親友の名前」を示す変数を「オプショナルな`String`型」として宣言します。

 ```swift
 ```
 
 変数`bestFriendName`は「何も値がない」状態です。
 */

var data: Int? = 123
data = nil
