/*:
 # comparison operators
 __`比較演算子`__
 \
 \
 `true`と`false`の真偽値は、2つのデータを比較する際に役立ちます。
 データの比較とは「二つのデータが互いに等しいか」や「どちらのデータが大きいか」などを評価することです。
 プログラミングではいくつかの**比較演算子**を利用することで、これを実行できます。
 比較演算子は**関係演算子**としても知られています。
 \
 \
 「データ同士が等しいかどうか」を評価するには、等価演算子`==`を利用します。
 
 次のコードは、「整数の`123`が`456`と等しいかどうか」を比較します。

 ```swift
 123 == 456  // false
 ```
 
 二つのデータは互いに等しくないので、実行した結果は`false`です。
 \
 \
 反対に、「データ同士が等しくないかどうか」を評価する不等価演算子`!=`もあります。
 
 次のコードは、「整数の`123`が`456`と等しくないかどうか」を評価します。
 
 ```swift
 123 != 456  // true
 ```
 
 二つのデータは互いに等しくないので、実行した結果は`true`です。
 \
 \
 「どちらのデータが大きいか」を評価するには、不等号演算子を利用します。
 
 次のコードは、「整数の123が456よりも大きいかどうか」を評価します。
 
 ```swift
 123 > 456  // false
 ```
 
 `123`は`456`よりも大きくないので、実行した結果は`false`です。
 \
 \
 反対に、次のコードは「整数の123が456よりも小さいかどうか」を評価します。
 
 ```swift
 123 < 456  // true
 ```
 
 `123`は`456`よりも小さいので、実行した結果は`true`です。
 \
 \
 大小関係を判断する境界について、より詳しい条件も評価できます。
 
 次のコードは、「ある整数インスタンス`number`が`101`以上かどうか」を評価します。
 
 ```swift
 let number = 100
 101 <= number  // false
 ```

 変数`number`には`100`が割り当てられており、`101`以上ではありません。
 したがって、実行した結果は`false`です。

 次のコードは変数`number`の値を`101`に変更してから、同じ比較を実行します。
 
 ```swift
 let number = 101   // change 100 to 101.
 101 <= number      // true
 ```
 
 変数`number`の値が`101`以上になったので、実行結果は`true`に変化します。
 \
 \
 これと同様に、比較対象が「ある大きさ以下であるかどうか」も評価できます。
 
 次のコードは、「変数`anotherNumber`が`99`以下であるかどうか」を評価します。
 
 ```swift
 let anotherNumber = 100
 99 >= anotherNumber    // false
 ```
 
 変数`anotherNumber`には`100`が割り当てられており、`99`以下ではありません。
 したがって、実行した結果は`false`です。
 \
 \
 変数`anotherNumberr`の値を`99`に変更してから同じ比較を実行すると、結果は`true`に変化します。
 
 ```swift
 let anotherNumber = 99     // chage 100 to 99.
 99 >= anotherNumber        // true
 ```

 ここまで見てきたように、比較演算子はその左辺と右辺に一つずつデータを指定して、評価します。
 そのような「2つのデータ」に対して利用される演算子を、特に**二項演算子**といいます。
 \
 \
 Swiftの比較演算子は数値以外のデータ同士でも比較できます。
 例えば、次のコードは文字列のデータ同士を比較します。
 
 ```swift
 "Hello" == "hello"  // false
 ```
 
 文字列の内容は同じに見えますが、片方は先頭が大文字になっています。
 したがって、実行した結果は`false`になりました。
 
 注意すべき点として、Swiftの比較演算子は「互いのデータ型が異なる値の比較」には利用できません。
 例えば、次のコードは「整数データと文字列データ」を比較しようとしています。
 
 ```swift
 123 == "123"    // error; binary operator '==' cannot be applied to operands of type 'Int' and 'String'
 ```
 
 左辺のデータは`Int`型ですが、右辺のデータは`String`型です。
 このような異なるデータ型の値を比較するコードに対して、コンパイラはエラーを報告します。
 */
123 == 456
123 != 456

123 > 456
123 < 456

let number = 101
101 <= number

let anotherNumber = 99
99 >= anotherNumber

"Hello" == "hello"
//123 == "123"
