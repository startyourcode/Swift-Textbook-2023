/*:
 # if conditional statements
 __`if条件分岐構文`__
 \
 \
 `true`と`false`の真偽値は、条件分岐コードを構築する際にその真価を発揮します。
 条件分岐とは、「ある条件を満たすかどうか」を評価した結果に基づいて、「実行すべきコード」を制御する仕組みです。

 ここでは例として、FizzBuzz問題のアルゴリズムを考えます。
 アルゴリズムとは「特定の問題を解決するための手順や方法」です。
 そして、FizzBuzzは「何人かの仲間たちと順番に数を数えていくゲーム」です。
 ただし、数える数が`3`の倍数なら「Fizz」、`5`の倍数なら「Buzz」、`3`と`5`の公倍数なら「FizzBuzz」と言うルールがあります。
 \
 \
 FizzBuzz問題は、コンピュータアルゴリズムを学ぶ際に挙げられる有名な題材でもあります。
 ここでは条件分岐プログラミングを学ぶために、任意の数が「`3`の倍数なら`"Fizz"`と出力する」ことにします。
 任意の数が「`3`の倍数であるかどうか」は、その数を`3`で割り算した余りを`0`と比較して判断できます。

 次のコードは「任意の数`number`が`3`の倍数であるかどうか」を評価します。

 ```swift
 let number = 4
 number % 3 == 0    // false
 ```
 
 割り算の余りは剰余演算子`%`で取得できます。
 任意の数が`4`だった場合、これを`3`で割ると余りが発生するので、`0`と等しくなりません。
 つまり、このコードを実行した結果は`false`になり、「`3`の倍数ではない」と評価できます。
 
 この結果を定数`isFizz`として保持しておきましょう。

 ```swift
 let isFizz = (number % 3 == 0) // false
 ```
 
 実行のためには不要ですが、比較演算の部分に括弧`()`を付けておくと、コードが読みやすくなります。
 \
 \
 ある条件を満たす場合に限り実行したいコードを記述するには、if条件分岐コードを利用できます。
 `if`ステートメントの先頭行には、`true`か`false`の真偽値を指定します。
 
 ```swift
 if isFizz {
 }
 ```
 
 そして、直後のコードブロックに「条件を満たす場合に限り実行したいコード」を記述します。
 
 ```swift
 if isFizz {
     print("Fizz")
 }
 ```

 ただし、このifステートメントを実行しても、結果は何も出力されません。
 定数`isFizz`は`false`であり、条件を満たしていないからです。

 定数`number`を「`3`の倍数」に変更してから、同じifステートメントを実行してみましょう。

 ```swift
 let number = 12                    // change 4 to 12.
 let isFizz = (number % 3 == 0)     // true

 if isFizz {
     print("Fizz")
 }
 // Prints Fizz
 ```
 
 すると、コンソールには「`"Fizz"`」と出力されます。
 ifステートメントに指定された条件が`true`になって、コードブロックの`print()`関数が実行されたことがわかります。
 */
let number = 12
let isFizz = (number % 3 == 0)

if isFizz {
    print("Fizz")
}

