/*:
 # structs
 __`構造体の基本`__
 \
 \
 模型を作ったことはありますか？
 自動車や飛行機などの模型は「現実の物体」をプラスティックでモデル化したものです。
 プログラミングでは、現実の物体や概念をデータでモデル化します。
 
 プラモデルは対象物を精巧に再現しますが、データモデルは対象物を**抽象化**して捉えます。
 ここでの抽象化とは「余計なことを無視して、必要な情報のみで構成する」ことを意味します。
 \
 \
 Swiftでは、データモデルを作成する方法のひとつに**構造体**があります。
 Swiftの`Int`型や`String`型は、あらかじめ定義された構造体です。
 独自の構造体を定義するには、`struct`キーワードを使います。
 
 例えば、次のコードは「四角い図形」をモデル化する構造体を定義します。
 
 ```swift
 struct Rectangle {
 }
 ```
 
 ボディに実装はありませんが、構造体の`Rectangle`型を定義できました。
 
 ここでは、型の識別子をアッパーキャメルケースで表記している点に注意してください。
 変数および定数、関数はロワーキャメルケースで表記されるので、プログラマーは直感的にこれらを区別できます。
 \
 \
 モデル化したデータをプログラムで扱うには、そのデータ型の**インスタンス**を作成します。
 インスタンスを作成するには、型名に括弧`()`をつけた特別な関数を使用します。

 次のコードは、「四角い図形」のインスタンスを作成します。
 
 ```swift
 Rectangle()
 ```
 
 インスタンスを作成するために呼び出した、このような関数を**イニシャライザ**といいます。
 イニシャライザは、どんなデータ型であっても「型名の直後に括弧`()`」の形式で呼び出せます。
 ここで呼び出した、括弧`()`の中にパラメータがない「最もシンプルなイニシャライザ」を**標準イニシャライザ**といいます。
 \
 \
 「作成したインスタンス」に名前をつけておけば、後から参照できます。
 
 次のコードは、`Rectangle`型インスタンスを作成して、「大きい四角形」を示す名前にします。
 
 ```
 let largeRectangle = Rectangle()
 ```
 
 続けて、「小さい四角形」を示すインスタンスを作成します。

 ```swift
 let smallRectangle = Rectangle()
 ```
 
 ふたつの`Rectangle`型インスタンスを作成しました。
 これらは互いに独立した別個のインスタンスであるものの、「データとしての特徴」に何も違いはありません。
 */
struct Rectangle {
    
}

let largeRectangle = Rectangle()
let smallRectangle = Rectangle()

